Q1
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int key;
	struct node *left;
	struct node *right;
	int height;
}node;

int height(node *n)
{
	if(n==NULL)
		return 0;                                    
	return n->height;
}

int max(int a,int b)
{
	return(a>b)?a:b;
}

node* newnode(int key)
{
	node* n=(node*)malloc(sizeof(struct node));
	n->key=key;
	n->left=NULL;
	n->right=NULL;
	n->height=1;
	return n;
}

node* rightrotate(node *y)
{
	node* x=y->left;
	node* T2=x->right;
	x->right=y;
	y->left=T2;
	y->height=max(height(y->left),height(y->right))+1;
	x->height=max(height(x->left),height(x->right))+1;
	return x;
}

node* leftrotate(node *x)
{
	node *y=x->right;
	node *T2=y->left;
	y->left=x;
	x->right=T2;
	x->height=max(height(x->left),height(x->right))+1;
	y->height=max(height(y->left),height(y->right))+1;
	return y;
}

int balfac(node* n)
{
	if(n==NULL)
		return 0;
	return height(n->left)-height(n->right);
}

node* insert(node*node,int key)
{
	if(node==NULL)
		return(newnode(key));
	if(key<node->key)
		node->left=insert(node->left,key);
	else if(key>node->key)
		node->right=insert(node->right,key);
	else
		return node;
	node->height=1+max(height(node->left),height(node->right));
	int balance=balfac(node);
	if(balance>1&&key<node->left->key)
		return rightrotate(node);
	if(balance<-1&&key>node->right->key)
		return leftrotate(node);
	if(balance>1&&key>node->left->key)
	{
		node->left=leftrotate(node->left);
		return rightrotate(node);
	}
	if(balance<-1&&key<node->right->key)
	{
		node->right=rightrotate(node->right);
		return leftrotate(node);
	}
	return node;
}

void preorder(node* root)
{
	if(root!=NULL)
	{
		printf("%d ", root->key );
		preorder(root->left);
		preorder(root->right);
	}
}

int main()
{
	node* root=NULL;
	root=insert(root,10);
	root=insert(root,20);
	root=insert(root,30);
	root=insert(root,40);
	root=insert(root,50);
	root=insert(root,25);
	printf("preorder of the constructed AVL tree is:\n");
	preorder(root);
	return 0;
}

===============================================================================
#include<stdio.h>
#include<stdlib.h>

typedef struct node {
    int key;
    struct node *left, *right;
    int height;
} node;

int height(node *N) {
    if (N == NULL)
        return 0;
    return N->height;
}

int max(int a, int b) {
    return (a > b) ? a : b;
}

node* newNode(int key) {
    node* n = (node*)malloc(sizeof(node));
    n->key = key;
    n->left = NULL;
    n->right = NULL;
    n->height = 1;  // new node is initially added at leaf
    return(n);
}

node* rightRotate(node *y) {
    node *x = y->left;
    node *T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Return new root
    return x;
}

node* leftRotate(node *x) {
    node *y = x->right;
    node *T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Return new root
    return y;
}
node* minValueNode(node* n) {
    node* current = n;
    /* loop down to find the leftmost leaf */
    while (current->left != NULL)
        current = current->left;
    return current;
}

node* maxValueNode(node* n) {
    node* current = n;
    /* loop down to find the rightmost leaf */
    while (current->right != NULL)
        current = current->right;
    return current;
}

// Function to find successor
node* successor(node* root, int key) {
    node* succ = NULL;

    while (root != NULL) {
        if (key < root->key) {
            succ = root;
            root = root->left;
        }
        else if (key > root->key)
            root = root->right;
        else {
            if (root->right != NULL) {
                succ = minValueNode(root->right);
            }
            break;
        }
    }

    return succ;
}

// Function to find predecessor
node* predecessor(node* root, int key) {
    node* pred = NULL;

    while (root != NULL) {
        if (key > root->key) {
            pred = root;
            root = root->right;
        }
        else if (key < root->key)
            root = root->left;
        else {
            if (root->left != NULL) {
                pred = maxValueNode(root->left);
            }
            break;
        }
    }

    return pred;
}

int getBalance(node *N) {
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}

node* insert(node* node, int key) {
    /* 1. Perform the normal BST rotation */
    if (node == NULL)
        return(newNode(key));

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else  // Equal keys not allowed
        return node;

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left), height(node->right));

    /* 3. Get the balance factor of this ancestor node to check whether
       this node became unbalanced */
    int balance = getBalance(node);

    // If this node becomes unbalanced, then there are 4 cases

    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);

    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    /* return the (unchanged) node pointer */
    return node;
}

void preorder(node *root) {
    if (root != NULL) {
        printf("%d ", root->key);
        preorder(root->left);
        preorder(root->right);
    }
}

// Functions for minValueNode, maxValueNode, successor, and predecessor are correct and remain unchanged

int main() {
    node* root = NULL;
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    printf("Preorder traversal of the constructed AVL tree is:\n");
    preorder(root);

    int key = 20;
    node* succ = successor(root, key);
    node* pred = predecessor(root, key);

    if (succ != NULL)
        printf("\nSuccessor of %d is %d", key, succ->key);
    else
        printf("\nSuccessor of %d does not exist", key);

    if (pred != NULL)
        printf("\nPredecessor of %d is %d", key, pred->key);
    else
        printf("\nPredecessor of %d does not exist", key);

    return 0;
}
=============================================
2,3 tree
#include <stdio.h>
#include <stdlib.h>

struct node {
  int data1;
  int data2;
  struct node *left;
  struct node *middle;
  struct node *right;
};

struct node *create_node(int data1, int data2) {
  struct node *new_node = malloc(sizeof(struct node));
  new_node->data1 = data1;
  new_node->data2 = data2;
  new_node->left = NULL;
  new_node->middle = NULL;
  new_node->right = NULL;
  return new_node;
}

void insert(struct node **root, int data) {
  if (*root == NULL) {
    *root = create_node(data, 0);
    return;
  }

  if (data < (*root)->data1) {
    insert(&(*root)->left, data);
  } else if (data > (*root)->data1) {
    if ((*root)->data2 == 0) {
      (*root)->data2 = data;
    } else {
      insert(&(*root)->right, data);
    }
  } else {
    // Duplicate data
    return;
  }

  // If the node has three data values, split it into two nodes
  if ((*root)->data2 != 0) {
    struct node *new_node = create_node((*root)->data2, 0);
    new_node->left = (*root)->right;
    (*root)->right = NULL;
    (*root)->data2 = 0;

    // Insert the new node into the parent node
    insert(&(*root)->parent, new_node->data1);
  }
}

void search(struct node *root, int data) {
  if (root == NULL) {
    printf("Data not found\n");
    return;
  }

  if (data < root->data1) {
    search(root->left, data);
  } else if (data > root->data1) {
    search(root->right, data);
  } else {
    printf("Data found\n");
  }
}

int main() {
  struct node *root = NULL;

  insert(&root, 10);
  insert(&root, 20);
  insert(&root, 30);
  insert(&root, 40);
  insert(&root, 50);

  search(root, 30);
  search(root, 60);

  return 0;
}
===========================
