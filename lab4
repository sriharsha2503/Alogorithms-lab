include <stdio.h>
#include <stdlib.h>
#include <math.h>

int** getPowerSet(int *set, int set_size) 
{ 
    unsigned int pow_set_size = pow(2, set_size); 
    int counter, j; 
    int** pow_set=(int**)malloc(sizeof(int*)*pow_set_size);
    for(counter = 0; counter < pow_set_size; counter++) 
    { 
    	int count=0;
    	int* sub=(int*)malloc(sizeof(int)*set_size);
      for(j = 0; j < set_size; j++) 
       { 
          if(counter & (1<<j))
          	sub[count++]=set[j];
       }
       sub[count]=-1;
       pow_set[counter]=sub;  
    }

    return pow_set; 
} 
int find_sum(int* a,int n){
	int sum=0;
	for(int i=0;i<n;i++)
	{
		sum+=a[i];
	}
	return sum;
}

int isDisjoint(int* a,int* b)
{
	int i=0;int j=0;
	while(a[i]!=-1){
		while(b[j]!=-1){
			if(a[i]==b[j])
				return 0;
			j++;
		}
		i++;
		j=0;
	}
	return 1;
}

void partition(int* set, int n){
	int** pow_set=getPowerSet(set,n);
	int* sums=(int*)malloc(sizeof(int)*pow(2,n));
	for(int i=0;i<pow(2,n);i++){
		int count=0;
		int j=0;
		while(pow_set[i][j]!=-1)
		{
			count++;
			j++;
		}
		int x=find_sum(pow_set[i],count);
		sums[i]=x;
	}

	for(int i=0;i<pow(2,n);i++)
	{
		int *part1=pow_set[i];
		for(int j=0;j<pow(2,n);j++)
		{
			if(i==j)
				continue;
			int *part2=pow_set[j];
			if(sums[i]==sums[j] & isDisjoint(part1,part2)==1)
			{
				int j=0,k=0;
				printf("Part 1: ");
				while(part1[j]!=-1)
				{
					printf("%d ",part1[j]);
					j++;
				}
				printf("Part 2: ");
				while(part2[k]!=-1)
				{
					printf("%d ",part2[k]);
					k++;
				}
				printf("Sum: %d",sums[i]);
			}
		}
		printf("\n");
	}
}

int main()
{
	int set[]={1,2,3,4};
	partition(set,4);
}

q3

#include <stdlib.h>
#include <stdio.h>

struct Graph{
	int V;
	int Adj[10][10];
};

int visited[10];

void add_edge(struct Graph* g, int v, int c){
	g->Adj[v][c]=1;
}

void BFS(struct Graph* g, int s)
{

    int queue[10];
    int front = 0;
    int rear = 0;
 
    visited[s] = 1;
    queue[rear++] = s;
 
    while (front != rear) {

        s = queue[front++];
        printf("%d ", s);

        for (int adjacent = 0; adjacent < g->V;adjacent++)
        {
            if (g->Adj[s][adjacent] && visited[adjacent]==0)
            {
                visited[adjacent] = 1;
                queue[rear++] = adjacent;
            }
        }
    }
}
void BFS_traversal(struct Graph* g,int s)
{
	BFS(g,s);
	for(int i=0;i<g->V;i++)
	{
		if(visited[i]==0)
			BFS(g,i);
	}
}
int main(){
	struct Graph* g=(struct Graph*)malloc(sizeof(struct Graph));
	g->V=5;
	for(int i=0;i<g->V;i++)
	{
		for(int j=0;j<g->V;j++)
		{
			g->Adj[i][j]=0;
		}
	}
	for (int i = 0; i < g->V; i++) {
        visited[i] = 0;
    }
    add_edge(g,0,1);
	add_edge(g,0,4);
	add_edge(g,1,3);
	// add_edge(g,0,2);
	add_edge(g,2,1);
	add_edge(g,4,3);
	add_edge(g,4,1);
	BFS_traversal(g,0);

}
=================================
#include <stdio.h>
#include <stdlib.h>

#define MAX 10 // Maximum number of vertices in the graph

// Define a structure for the stack
typedef struct {
    int items[MAX];
    int top;
} Stack;

// Function prototypes
void initStack(Stack *);
int isFull(Stack *);
int isEmpty(Stack *);
void push(Stack *, int);
int pop(Stack *);
void DFS(int);
void addEdge(int, int);
void printPushPopOrder(int, char);

// Global variables
int adj[MAX][MAX]; // Adjacency matrix
int visited[MAX]; // Visited array
int n; // Number of vertices
Stack s;

int main() {
    int vertices, edges, i, j, v1, v2;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);
    n = vertices;

    // Initialize the adjacency matrix and visited array
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
        visited[i] = 0;
    }

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for (i = 0; i < edges; i++) {
        printf("Enter the vertices for edge %d (v1 v2): ", i+1);
        scanf("%d %d", &v1, &v2);
        addEdge(v1, v2);
    }

    initStack(&s); // Initialize the stack

    // Perform DFS traversal
    printf("DFS traversal: ");
    DFS(0); // Assuming 0 as the starting vertex

    return 0;
}

// Initialize stack
void initStack(Stack *sp) {
    sp->top = -1;
}

// Check if stack is full
int isFull(Stack *sp) {
    return sp->top == MAX - 1;
}

// Check if stack is empty
int isEmpty(Stack *sp) {
    return sp->top == -1;
}

// Push an element onto the stack
void push(Stack *sp, int item) {
    if (!isFull(sp)) {
        sp->items[++sp->top] = item;
        printPushPopOrder(item, 'P'); // P for push
    } else {
        printf("Stack full\n");
    }
}

// Pop an element from the stack
int pop(Stack *sp) {
    if (!isEmpty(sp)) {
        int item = sp->items[sp->top--];
        printPushPopOrder(item, 'o'); // o for pop
        return item;
    } else {
        return -1; // Stack is empty
    }
}

// Add edge to the graph
void addEdge(int v1, int v2) {
    adj[v1][v2] = 1;
    adj[v2][v1] = 1; // For an undirected graph
}

// DFS algorithm
void DFS(int vertex) {
    push(&s, vertex);
    visited[vertex] = 1;
    printf("%d ", vertex);

    for (int i = 0; i < n; i++) {
        if (adj[vertex][i] == 1 && !visited[i]) {
            DFS(i);
        }
    }
    pop(&s);
}

// Print push or pop order
void printPushPopOrder(int vertex, char operation) {
    if (operation == 'P') {
        printf("\nPush: %d", vertex);
    } else if (operation == 'o') {
        printf("\nPop: %d", vertex);
    }
}
=====================================
