bottom approach
======================================================
#include<stdio.h>
#include<stdlib.h>

int opCount=0;

void swap(int *a,int *b){
	int temp;
	temp=*a;
	*a=*b;
	*b=temp;

}

int heapify(int arr[],int N,int i){
	int largest=i;
	int left=2*i+1;
	int right=2*i+2;
	//int opCount=0;

	if(left<N && arr[left]>arr[largest]){
		largest=left;
	    opCount++;

	}

	if(right<N && arr[right]>arr[largest]){
		largest=right;
	    opCount++;

	}


	if(largest!=i){
		swap(&arr[i],&arr[largest]);

	    heapify(arr,N,largest);

	}

}

int buildHeap(int arr[],int N){
	int startIndex=(N/2)-1;  //index of last non-leaf node
	int opCount=0;
	for(int i=startIndex;i>=0;i--){
		heapify(arr,N,i);

	}
    //int opCount=heapify(arr,N,i);
	//printf("Number of comparisons: %d\n",opCount);
    //return opCount;

}

void printHeap(int arr[],int N){
	printf("Array representation of heap is:\n");
	for(int i=0;i<N;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
}

int main(){
	int N;
	int *arr=(int*)malloc(N*sizeof(int));
	printf("Enter size of array:");
	scanf("%d",&N);
	printf("Enter elements:");
	for(int i=0;i<N;i++){
		scanf("%d",&arr[i]);
	}
	

	buildHeap(arr,N);
	printHeap(arr,N);

	printf("Number of comparisons: %d\n",opCount);
	


	return 0;
}
=======================================================
topdown approach
=======================================================
#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int heap[], int i, int heapSize) {
    int largest = i; // Initialize largest as root
    int left = 2 * i + 1; // left = 2*i + 1
    int right = 2 * i + 2; // right = 2*i + 2

    // If left child is larger than root
    if (left < heapSize && heap[left] > heap[largest]) {
        largest = left;
    }

    // If right child is larger than largest so far
    if (right < heapSize && heap[right] > heap[largest]) {
        largest = right;
    }

    // If largest is not root
    if (largest != i) {
        swap(&heap[i], &heap[largest]);

        // Recursively heapify the affected sub-tree
        heapify(heap, largest, heapSize);
    }
}

void insertHeap(int heap[], int *heapSize, int value) {
    // Insert the new element at the end of the heap
    heap[*heapSize] = value;
    (*heapSize)++;

    // Move up through the heap, swapping with the parent node
    // until the heap property is restored
    for (int i = *heapSize - 1; i != 0 && heap[(i - 1) / 2] < heap[i];) {
        // Swap with the parent
        swap(&heap[(i - 1) / 2], &heap[i]);

        // Move up to the parent index
        i = (i - 1) / 2;
    }
}

void printHeap(int heap[], int heapSize) {
    for (int i = 0; i < heapSize; ++i) {
        printf("%d ", heap[i]);
    }
    printf("\n");
}

int main() {
    int heap[10]; // Let's assume we'll have at most 10 elements for simplicity
    int heapSize = 0;

    // List of integers to create a heap from
    int numbers[] = {3, 1, 6, 5, 2, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    // Insert elements into the heap using the top-down approach
    for (int i = 0; i < n; i++) {
        insertHeap(heap, &heapSize, numbers[i]);
    }

    // Print the heap
    printf("The max heap is:\n");
    printHeap(heap, heapSize);

    return 0;
}

========================================================
#include<stdio.h>
#include<stdlib.h>
int opCount=0;//global variable 

void swap(int *a,int *b){
	int temp;
	temp=*a;
	*a=*b;
	*b=temp;

}

void heapify(int arr[],int N,int i){
	int largest=i;
	int left=2*i+1;
	int right=2*i+2;

	if(left<N && arr[left]>arr[largest]){
		largest=left;
		opCount++;
	}

	if(right<N && arr[right]>arr[largest]){
		largest=right;
		opCount++;
	}

	if(largest!=i){
		swap(&arr[i],&arr[largest]);

		heapify(arr,N,largest);
	}

	
}

void heapSort(int arr[],int N){
	for(int i=(N/2)-1;i>=0;i--){
		heapify(arr,N,i);
	}
	//heap sort
	for(int i=N-1;i>=0;i--){
		swap(&arr[0],&arr[i]);

		//heapify to get the largest at root again
		heapify(arr,i,0);
	}
}



void printArray(int arr[],int N){
	for(int i=0;i<N;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
}

int main(){
	
	int N;
	printf("Enter size of array:");
	scanf("%d",&N);
	int *arr=(int*)malloc(N*sizeof(int));
	
	printf("Enter elements:");
	for(int i=0;i<N;i++){
		scanf("%d",&arr[i]);
	}
	heapSort(arr,N);
	printf("Sorted array:\n");
	printArray(arr,N);
	/*
	int arr[]={12,11,13,5,6,7};
	int N=sizeof(arr)/sizeof(arr[0]);

	heapSort(arr,N);
	printf("Sorted array:\n");
	printArray(arr,N);
*/

	printf("Number of comparisons: %d\n",opCount);

}
	
