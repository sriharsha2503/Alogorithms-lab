#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node* left,* right;
}node;

node *createnode(int key)
{
	node *newnode=(node*)malloc(sizeof(node));
	newnode->data=key;
	newnode->left=NULL;
	newnode->right=NULL;
	return(newnode);
}

static int count=0;

int countnodes(node *root)
{
	if(root!=NULL)
	{
		countnodes(root->left);
		count++;
		countnodes(root->right);
	}
	return count;
}


int main()
{
	node *newnode=createnode(25);
	newnode->left=createnode(27);
	newnode->right=createnode(19);
	newnode->left->left=createnode(17);
	newnode->left->right=createnode(91);
	newnode->right->left=createnode(13);
	newnode->right->right=createnode(55);
	printf("number of nodes in the tree 1 = %d",countnodes(newnode));
	printf("\n");
	count=0;
}




Q2#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to find the partition position
int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (array[j] < pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }

    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Function to perform quicksort
void quickSort(int array[], int low, int high, int *operationCount) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1, operationCount);
        quickSort(array, pi + 1, high, operationCount);

        // Increment operation count for partition operation
        (*operationCount)++;
    }
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int array[size];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    int operationCount = 0;
    quickSort(array, 0, size - 1, &operationCount);

    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    printf("Number of operations: %d\n", operationCount);

    return 0;
}





//Quick sort 1st method
#include<stdio.h>
int count;

void printArray(int A[],int n){
    for(int i=0;i<n;i++){
        printf("%d ",A[i]);
    }
    printf("\n");
}

int partition(int A[],int low,int high){
    int pivot=A[low];
    int i=low+1;
    int j=high;
    int temp;
    int count=0;

    do{
        while(A[i]<=pivot){
            i++;
        }
        while(A[j]>pivot){
            j--;
        }
        if(i<j){
            //swap A[i] and A[j]
            temp=A[i];
            A[i]=A[j];
            A[j]=temp;
        }
    }while(i<=j);

    //swap A[j] and A[low]
    //swapping A[j] and pivot won't make changes in the original array
    temp=A[j];
    A[j]=A[low];
    A[low]=temp;

    return j;

}

void quickSort(int A[],int low, int high){
    int partitionIndex;//index of pivot after partition
    if(low<high){
        count++;
        partitionIndex=partition(A,low,high);
        quickSort(A,low,partitionIndex-1); //sort left sub array
        quickSort(A,partitionIndex+1,high); //sort right sub array
    }
}

int main(){
    int n;
    printf("Enter the size of array:");
    scanf(" %d",&n);
    int A[n];                                                         
    printf("Enter elements of array:");
    for(int i=0;i<n;i++){
        scanf(" %d",&A[i]);
    }
    printf("Array before quickSort:");
    printArray(A,n);
    quickSort(A,0,n-1);
    printf("Array after quickSort:");
    printArray(A,n);

    return 0;
}
Q2 2nd method.
#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to find the partition position
int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (array[j] < pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }

    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Function to perform quicksort
void quickSort(int array[], int low, int high, int *operationCount) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1, operationCount);
        quickSort(array, pi + 1, high, operationCount);

        // Increment operation count for partition operation
        (*operationCount)++;
    }
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int array[size];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    int operationCount = 0;
    quickSort(array, 0, size - 1, &operationCount);

    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    printf("Number of operations: %d\n", operationCount);

    return 0;
}


3Q
