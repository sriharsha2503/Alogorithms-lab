#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node* left,* right;
}node;

node *createnode(int key)
{
	node *newnode=(node*)malloc(sizeof(node));
	newnode->data=key;
	newnode->left=NULL;
	newnode->right=NULL;
	return(newnode);
}

static int count=0;

int countnodes(node *root)
{
	if(root!=NULL)
	{
		countnodes(root->left);
		count++;
		countnodes(root->right);
	}
	return count;
}


int main()
{
	node *newnode=createnode(25);
	newnode->left=createnode(27);
	newnode->right=createnode(19);
	newnode->left->left=createnode(17);
	newnode->left->right=createnode(91);
	newnode->right->left=createnode(13);
	newnode->right->right=createnode(55);
	printf("number of nodes in the tree 1 = %d",countnodes(newnode));
	printf("\n");
	count=0;
}




Q2#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to find the partition position
int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (array[j] < pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }

    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Function to perform quicksort
void quickSort(int array[], int low, int high, int *operationCount) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1, operationCount);
        quickSort(array, pi + 1, high, operationCount);

        // Increment operation count for partition operation
        (*operationCount)++;
    }
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int array[size];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    int operationCount = 0;
    quickSort(array, 0, size - 1, &operationCount);

    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    printf("Number of operations: %d\n", operationCount);

    return 0;
}





//Quick sort 1st method
#include<stdio.h>
int count;

void printArray(int A[],int n){
    for(int i=0;i<n;i++){
        printf("%d ",A[i]);
    }
    printf("\n");
}

int partition(int A[],int low,int high){
    int pivot=A[low];
    int i=low+1;
    int j=high;
    int temp;
    int count=0;

    do{
        while(A[i]<=pivot){
            i++;
        }
        while(A[j]>pivot){
            j--;
        }
        if(i<j){
            //swap A[i] and A[j]
            temp=A[i];
            A[i]=A[j];
            A[j]=temp;
        }
    }while(i<=j);

    //swap A[j] and A[low]
    //swapping A[j] and pivot won't make changes in the original array
    temp=A[j];
    A[j]=A[low];
    A[low]=temp;

    return j;

}

void quickSort(int A[],int low, int high){
    int partitionIndex;//index of pivot after partition
    if(low<high){
        count++;
        partitionIndex=partition(A,low,high);
        quickSort(A,low,partitionIndex-1); //sort left sub array
        quickSort(A,partitionIndex+1,high); //sort right sub array
    }
}

int main(){
    int n;
    printf("Enter the size of array:");
    scanf(" %d",&n);
    int A[n];                                                         
    printf("Enter elements of array:");
    for(int i=0;i<n;i++){
        scanf(" %d",&A[i]);
    }
    printf("Array before quickSort:");
    printArray(A,n);
    quickSort(A,0,n-1);
    printf("Array after quickSort:");
    printArray(A,n);

    return 0;
}
Q2 2nd method.
#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to find the partition position
int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (array[j] < pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }

    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

// Function to perform quicksort
void quickSort(int array[], int low, int high, int *operationCount) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1, operationCount);
        quickSort(array, pi + 1, high, operationCount);

        // Increment operation count for partition operation
        (*operationCount)++;
    }
}

int main() {
    int size;
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int array[size];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    int operationCount = 0;
    quickSort(array, 0, size - 1, &operationCount);

    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    printf("Number of operations: %d\n", operationCount);

    return 0;
}


3Q


#include <stdio.h>

void merge(int arr[], int l, int m, int r, int *count) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++) {
        L[i] = arr[l + i];
        (*count)++;
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
        (*count)++;
    }

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
        (*count)++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
        (*count)++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
        (*count)++;
    }
}

void mergeSort(int arr[], int l, int r, int *count) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m, count);
        mergeSort(arr, m + 1, r, count);
        merge(arr, l, m, r, count);
    }
}

int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the elements of the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int count = 0;
    mergeSort(arr, 0, n - 1, &count);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printf("Number of operations: %d\n", count);

    return 0;
}
=======================================================

new version:========================QUICK SORT
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

// Modified Partition using the first element as pivot
int partition(int arr[], int low, int high) {
    int pivot = arr[low]; // Pivot is now the first element
    int i = low; // 'i' starts at 'low'
    int j = high + 1; // 'j' starts at 'high + 1'

    while (1) {
        // Increment i as long as elements are less than pivot
        do {
            i++;
        } while (i <= high && arr[i] < pivot);

        // Decrement j as long as elements are greater than pivot
        do {
            j--;
        } while (arr[j] > pivot);

        if (i >= j) break; // Break if pointers meet

        swap(&arr[i], &arr[j]); // Swap elements at i and j
    }
    swap(&arr[low], &arr[j]); // Swap the pivot element with element at j
    return j; // Return the partition point
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1); // Recursively sort the left side of pivot
        quickSort(arr, pi + 1, high); // Recursively sort the right side of pivot
    }
}

// Utility function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Example usage
int main() {
    srand(time(0)); // Initialization, should only be called once.
    int n = 10; // Example size
    int* arr = malloc(n * sizeof(int));

    // Generate random numbers
    for(int i = 0; i < n; i++)
        arr[i] = rand() % 100; // Random numbers between 0 and 99

    printf("Original array:\n");
    printArray(arr, n);

    quickSort(arr, 0, n-1);

    printf("Sorted array:\n");
    printArray(arr, n);

    free(arr);
    return 0;
}

==================================================
newversion:=====================MERGESORT
#include <stdio.h>
#include <stdlib.h>

// Function to merge two halves into a sorted data.
void merge(int arr[], int left[], int right[], int leftCount, int rightCount) {
    int i = 0, j = 0, k = 0;

    // Merge the left and right arrays
    while (i < leftCount && j < rightCount) {
        if (left[i] < right[j]) arr[k++] = left[i++];
        else arr[k++] = right[j++];
    }
    while (i < leftCount) arr[k++] = left[i++];
    while (j < rightCount) arr[k++] = right[j++];
}

// Function to copy elements from source to dest
void copy(int source[], int dest[], int n) {
    for (int i = 0; i < n; i++) {
        dest[i] = source[i];
    }
}

// Recursive function to sort an array using merge sort
void mergeSort(int arr[], int n) {
    int mid, i;
    if (n < 2) return; // base condition. If the array has less than two element, do nothing.

    mid = n / 2; // find the mid index.

    int *left = (int*)malloc(mid * sizeof(int)); 
    int *right = (int*)malloc((n - mid) * sizeof(int));

    // Copy the left part and right part into left and right array respectively
    copy(arr, left, mid);
    copy(arr + mid, right, n - mid);

    // Recursively sort the left and right parts
    mergeSort(left, mid);
    mergeSort(right, n - mid);

    // Merge the left and right array
    merge(arr, left, right, mid, n - mid);
    free(left);
    free(right);
}

// Function to print the array
void printArray(int A[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

// Test the code
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array is \n");
    printArray(arr, arr_size);

    mergeSort(arr, arr_size);

    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}

