#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node* left,* right;
}node;

node *createnode(int key)
{
	node *newnode=(node*)malloc(sizeof(node));
	newnode->data=key;
	newnode->left=NULL;
	newnode->right=NULL;
	return(newnode);
}

static int count=0;

int countnodes(node *root)
{
	if(root!=NULL)
	{
		countnodes(root->left);
		count++;
		countnodes(root->right);
	}
	return count;
}


int main()
{
	node *newnode=createnode(25);
	newnode->left=createnode(27);
	newnode->right=createnode(19);
	newnode->left->left=createnode(17);
	newnode->left->right=createnode(91);
	newnode->right->left=createnode(13);
	newnode->right->right=createnode(55);
	printf("number of nodes in the tree 1 = %d",countnodes(newnode));
	printf("\n");
	count=0;
}




Q2//Quick sort
#include<stdio.h>

void printArray(int A[],int n){
	for(int i=0;i<n;i++){
		printf("%d ",A[i]);
	}
	printf("\n");
}

int partition(int A[],int low,int high){
	int pivot=A[low];
	int i=low+1;
	int j=high;
	int temp;
	int count=0;

	do{
		while(A[i]<=pivot){
			i++;
		}
		while(A[j]>pivot){
			j--;
		}
		if(i<j){
			//swap A[i] and A[j]
			temp=A[i];
			A[i]=A[j];
			A[j]=temp;
		}
	}while(i<j);

	//swap A[j] and A[low]
	//swapping A[j] and pivot won't make changes in the original array
	temp=A[j];
	A[j]=A[low];
	A[low]=temp;

	return j;

}

void quickSort(int A[],int low, int high){
	int partitionIndex;//index of pivot after partition
	if(low<high){
		partitionIndex=partition(A,low,high);
		quickSort(A,low,partitionIndex-1); //sort left sub array
		quickSort(A,partitionIndex+1,high); //sort right sub array
	}
}

int main(){
	int n;
	printf("Enter the size of array:");
	scanf("%d",&n);
	int A[n];                                                         
	printf("Enter elements of array:");
	for(int i=0;i<n;i++){
		scanf("%d",&A[i]);
	}
	printf("Array before quickSort:");
	printArray(A,n);
	quickSort(A,0,n-1);
	printf("Array after quickSort:");
	printArray(A,n);

    return 0;
}




Q3//mergesort
#include<stdio.h>

void printArray(int A[],int n){
	for(int i=0;i<n;i++){
		printf("%d",A[i]);
	}
	printf("\n");
}

void merge(int A[],int low, int mid,int high){
	int i=low;
	int j=mid+1;
	int k=low;
	int B[100];

	while(i<=mid && j<=high){
		if(A[i]<A[j]){
			B[k]=A[i];
			i++;
			k++;
		}
		else{
			B[k]=A[j];
			j++;
			k++;
		}
	}
	while(i<=mid){
		B[k]=A[i];
		i++;
		k++;
	}
	while(j<=high){
		B[k]=A[j];
		j++;
		k++;
	}
	for(int i=low;i<=high;i++){
		A[i]=B[i];
	}
	
}

int mergeSort(int A[],int low,int high){
	int mid;
	//int inv_count=0;
	if(low<high){
		mid=(low+high)/2;
		mergeSort(A,low,mid);
		mergeSort(A,mid+1,high);
		merge(A,low,mid,high);

      /*
		inv_count += mergeSort(A, low,mid);
        inv_count += mergeSort(A,mid+1,high);
 
        // Merge the two parts
        inv_count += merge(A,low, mid,high);
    
    return inv_count;
    */
    }
	
}
/*
int getInvCount(int A[], int n)
{
    int inv_count = 0;
    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (A[i] > A[j])
                inv_count++;
 
    return inv_count;
}
*/

void main(){
	int n;
	printf("Enter the size of array:");
	scanf("%d",&n);
	int A[n];
	printf("Enter elements of array:");
	for(int i=0;i<n;i++){
		scanf("%d",&A[i]);
	}
	printf("Array before mergeSort:");
	printArray(A,n);
	mergeSort(A,0,n-1);
	printf("Array after mergeSort:");
	printArray(A,n);
	printf(" Number of inversions are %d \n",
    getInvCount(A, n));
}
