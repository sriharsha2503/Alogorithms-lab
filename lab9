#include <stdio.h>
#include <string.h>
#define MAX_CHAR 256  // Maximum number of characters in the char set

// Function to create the shift table
void shiftTable(char pattern[], int table[MAX_CHAR]) {
    int m = strlen(pattern);
    for (int i = 0; i < MAX_CHAR; i++) {
        table[i] = m;  // Initialize all shifts with the length of pattern
    }
    for (int i = 0; i < m - 1; i++) {
        table[(unsigned char)pattern[i]] = m - 1 - i;  // Set the shift value for the pattern
    }
}

// Horspool's algorithm for string matching
int horspool(char text[], char pattern[], int* comparisons) {
    int m = strlen(pattern);
    int n = strlen(text);
    int table[MAX_CHAR];
    *comparisons = 0;  // Reset comparisons count

    shiftTable(pattern, table);  // Preprocess the pattern

    int i = m - 1;  // Position of the rightmost character of the window in T
    while (i < n) {
        int k = 0;
        while (k < m && pattern[m - 1 - k] == text[i - k]) {
            k++;
            (*comparisons)++;  // Count each key comparison
        }
        if (k == m) {
            return i - m + 1;  // Match found at position i - m + 1
        } else {
            (*comparisons)++;  // Count the comparison that resulted in a mismatch
            i += table[(unsigned char)text[i]];  // Shift the pattern
        }
    }
    return -1;  // No match found
}

int main() {
    char text[] = "THIS IS A TEST TEXT";
    char pattern[] = "TEST";
    int comparisons = 0;
    
    int pos = horspool(text, pattern, &comparisons);
    
    if (pos >= 0) {
        printf("Pattern found at position: %d\n", pos);
    } else {
        printf("Pattern not found.\n");
    }
    printf("Number of key comparisons: %d\n", comparisons);

    return 0;
}

=======================================================
#include <stdio.h>
#include <stdlib.h>

#define KEYS_TO_INSERT 50 // Can be changed to 50, 100, 200 as needed
#define TABLE_SIZE 10     // Hash table size

typedef struct {
    int key;
    int value; // Placeholder for associated data
} HashItem;

// Initialize the hash table
void initHashTable(HashItem** table, int size) {
    for (int i = 0; i < size; i++) {
        table[i] = NULL;
    }
}

// Simple hash function
int hash(int key, int size) {
    return key % size;
}

// Insert a key into the hash table
void insert(HashItem** table, int key, int value, int size) {
    int index = hash(key, size);
    int originalIndex = index;
    int i = 1;

    while (table[index] != NULL && i < size) {
        index = (originalIndex + i) % size; // Linear probing
        i++;
    }

    if (i == size) { // Table is full
        printf("Insertion failed. Table is full.\n");
        return;
    }

    HashItem* newItem = (HashItem*)malloc(sizeof(HashItem));
    newItem->key = key;
    newItem->value = value;
    table[index] = newItem;
}

// Search for a key in the hash table
int search(HashItem** table, int key, int size, int* comparisons) {
    int index = hash(key, size);
    int originalIndex = index;
    int i = 1;

    *comparisons = 0; // Reset comparison count

    while (table[index] != NULL && i < size) {
        (*comparisons)++;
        if (table[index]->key == key) {
            return index; // Key found
        }
        index = (originalIndex + i) % size;
        i++;
    }

    (*comparisons)++;
    return -1; // Key not found
}

int main() {
    HashItem* hashTable[TABLE_SIZE];
    initHashTable(hashTable, TABLE_SIZE);

    // Insert KEYS_TO_INSERT keys into the hash table
    for (int i = 0; i < KEYS_TO_INSERT; i++) {
        insert(hashTable, i, i, TABLE_SIZE); // Using key as value for simplicity
    }

    int comparisons = 0;
    // Search for a key and count comparisons
    int keyToSearch = 25; // Example key
    int foundIndex = search(hashTable, keyToSearch, TABLE_SIZE, &comparisons);
    printf("Key %d %sfound. Comparisons: %d\n", keyToSearch, foundIndex >= 0 ? "" : "not ", comparisons);

    // Repeat for different table sizes and load factors as needed
    // Cleanup omitted for brevity

    return 0;
}

=====================================
Q2 open hash table
#include <stdio.h>
#include <stdlib.h>

typedef struct hash
{	int value;
	struct hash* nvalue;    //nvalue is next value.
}hash;

int opcount = 0;

void createhash(hash* openhash[],int m)       //creates the open hash table
{	
	for(int i=0; i<m;i++)
	{
		hash* temp = (hash*)malloc(sizeof(hash));     //in open hash table we have pointers .
		temp->value = 0;
		temp->nvalue = NULL;
		openhash[i]= temp;
	}
}


void addvalue(int arr[],hash* openhash[],int m,int n)
{
	for(int i= 0;i<n;i++)
	{
		int key = arr[i]%m;
		hash* curr = openhash[key];
		while(curr->nvalue!=NULL)
		{
			curr = curr->nvalue;
		}
		curr->value = arr[i];
		hash* temp = (hash*) malloc(sizeof(hash));
		temp->value = 0;
		temp->nvalue = NULL;
		curr->nvalue = temp;

	}
}

void printhash(hash* openhash[],int m)
{
	for(int i =0;i<m;i++)
	{
		hash* curr = openhash[i];
		while(curr->nvalue)
		{
			printf("%d ->",curr->value);
			curr=curr->nvalue;
		}
		printf("\n");
	}
}

void search(hash* openhash[],int value,int m)
{
	hash* curr = openhash[value%m];
	opcount++;

	while(curr->value != value && curr->nvalue)
	{
		curr=curr->nvalue;
		opcount++;
	}

	if(curr)
	{
		printf("value found");
	}
	else
	{
		printf("value not found");
	}

	printf("\nopcount: %d\n",opcount);

}

int main(){
	int n,m;
	printf("Enter the value of n:");
	scanf("%d",&n);                                                //number of entries.
	printf("Enter the value of m:");
	scanf("%d",&m);                                                //size of the hash table
	hash* openhash[m];
	createhash(openhash,m);
	int arr[n];                                                   
	printf("Enter the values:");
	for(int i=0;i<n;i++)
	{	
		scanf("%d",&arr[i]);
	}
	addvalue(arr,openhash,m,n);
	printhash(openhash,m);
	int value;
	printf("Enter the value to be searched:");
	scanf("%d",&value);
	search(openhash,value,m);
	return 0;
}
