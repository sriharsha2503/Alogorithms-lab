#include<stdio.h>
#include <stdio.h>
#include <string.h>

#define MAX 256

int t[MAX]; // shift table

// initialize shift table for pattern p
void shifttable(const char p[]) {
    int i, m;
    m = strlen(p);
    for (i = 0; i < MAX; i++)
        t[i] = m;
    for (i = 0; i < m - 1; i++)
        t[p[i]] = m - 1 - i;
}

// search for pattern p in string src using Horspool algorithm
int horspool(const char src[], const char p[]) {
    int i, j, k, m, n;
    n = strlen(src);
    m = strlen(p);
    i = m - 1;
    while (i < n) {
        j = m - 1;
        k = 0;
        while ((j >= 0) && (p[j] == src[i - k])) {
            j--;
            k++;
        }
        if (j == -1) {
            // pattern found, return the starting index
            return (i - m + 1);
        } else {
            // shift the pattern by the amount in the shift table
            i += t[src[i]];
        }
    }
    // pattern not found, return -1
    return -1;
}

int main() {
    char src[100], p[100];
    int pos;

    printf("Enter the text in which pattern is to be searched:\n");
    fgets(src, sizeof(src), stdin); // use fgets instead of gets to prevent buffer overflow
    src[strcspn(src, "\n")] = '\0'; // remove newline character from the end of src

    printf("Enter the pattern to be searched:\n");
    fgets(p, sizeof(p), stdin); // use fgets instead of gets to prevent buffer overflow
    p[strcspn(p, "\n")] = '\0'; // remove newline character from the end of p

    shifttable(p);
    pos = horspool(src, p);

    if (pos >= 0)
        printf("Pattern found at index %d\n", pos);
    else
        printf("Pattern not found\n");

    return 0;
}


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define HASH_TABLE_SIZE 10
struct node 
{
    char *data;
    struct node *next;
};
int hash(char *str)
{
    int hash = 0;
    while (*str)
    {
        hash =hash+(*str++)-97;
    }
    return hash % HASH_TABLE_SIZE;
}
struct node *chain[HASH_TABLE_SIZE];
int comparisons = 0; 
void init()
{
    int i;
    for(i = 0; i < HASH_TABLE_SIZE; i++)
    {
        chain[i] = NULL;
    }
}
void insert(char *value) 
{
    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = value;
    newNode->next = NULL;
    int key = hash(value);
    if(chain[key] == NULL)
    {
        chain[key] = newNode;
    }
    else 
    {
        struct node *temp = chain[key];
        while(temp->next!=NULL)
        {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}
int search(char *key) {
    int index = hash(key);
    struct node *temp = chain[index];
    comparisons = 0;
    while(temp != NULL) {
        comparisons++;
        if(strcmp(temp->data, key) == 0)
        {
            return 1;
        }
        temp = temp->next;
    }
    return 0;
}
void print() 
{
    int i;  
    for(i = 0; i < HASH_TABLE_SIZE; i++) 
    {
        struct node *temp = chain[i];
        printf("chain[%d]->", i);
        while(temp) 
        {
            printf("%s ->", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}
int main() {
    init();
    insert("jeffin");
    insert("jowan");
    insert("ameen");
    insert("harsha");
    insert("anuj");
    insert("balaji");
    insert("morvin");
    insert("abhijeet");
    insert("daren");
    insert("sarvagya");
    insert("singh");
    insert("sri");
    insert("shaik");
    insert("parnav");    
    insert("sambhav");
    insert("arjun");
    insert("ketan");
    insert("varma");
    print();
    char *key_to_search = "harsha";
    if(search(key_to_search))
    {
        printf("Key %s found with %d comparisons\n", key_to_search, comparisons);
    }
    else
    {
        printf("Key %s not found with %d comparisons\n", key_to_search, comparisons);
    }
    key_to_search = "sri";
    if(search(key_to_search))
    {
        printf("Key %s found with %d comparisons\n", key_to_search, comparisons);
    }
    else
    {
        printf("Key %s not found with %d comparisons\n", key_to_search, comparisons);
    }
}
