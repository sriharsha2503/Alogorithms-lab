#include <stdio.h>
#include <stdlib.h>

// Define a structure for a stack to be used in DFS
typedef struct {
    int items[100];
    int top;
} Stack;

// Initialize a stack
void initStack(Stack* s) {
    s->top = -1;
}

// Check if the stack is empty
int isEmpty(Stack* s) {
    return s->top == -1;
}

// Push an element onto the stack
void push(Stack* s, int element) {
    s->items[++s->top] = element;
}

// Pop an element from the stack
int pop(Stack* s) {
    if (!isEmpty(s)) {
        return s->items[s->top--];
    }
    return -1; // Return -1 if the stack is empty
}

// Define a structure for a graph
typedef struct {
    int numVertices;
    int** adjMatrix;
} Graph;

// Initialize a graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjMatrix = (int**)malloc(vertices * sizeof(int*));
    for (int i = 0; i < vertices; i++) {
        graph->adjMatrix[i] = (int*)malloc(vertices * sizeof(int));
        for (int j = 0; j < vertices; j++) {
            graph->adjMatrix[i][j] = 0;
        }
    }
    return graph;
}

// Add edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    // Add an edge from src to dest. A new element is added to the adjacency list of src.
    // The edge is directed, meaning it goes from src to dest
    graph->adjMatrix[src][dest] = 1; // Considering a directed graph
}

// DFS function to perform topological sort
void topologicalSortDFS(Graph* graph, int v, int visited[], Stack* stack) {
    visited[v] = 1;
    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjMatrix[v][i] == 1 && !visited[i]) {
            topologicalSortDFS(graph, i, visited, stack);
        }
    }
    push(stack, v);
}

// Function to perform topological sort using DFS
void dfsTopologicalSort(Graph* graph) {
    Stack stack;
    initStack(&stack);
    int visited[graph->numVertices];
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0;
    }
    for (int i = 0; i < graph->numVertices; i++) {
        if (!visited[i]) {
            topologicalSortDFS(graph, i, visited, &stack);
        }
    }
    printf("Topological Sort (DFS): ");
    while (!isEmpty(&stack)) {
        printf("%d ", pop(&stack));
    }
    printf("\n");
}

// Function to find vertices with no incoming edge
int findZeroInDegree(int* inDegree, int numVertices, int* visited) {
    for (int i = 0; i < numVertices; i++) {
        if (inDegree[i] == 0 && visited[i] == 0) {
            return i;
        }
    }
    return -1;
}

// Function to perform topological sort using source removal
void sourceRemovalTopologicalSort(Graph* graph) {
    int inDegree[graph->numVertices];
    int visited[graph->numVertices];
    for (int i = 0; i < graph->numVertices; i++) {
        inDegree[i] = 0;
        visited[i] = 0;
    }

    // Calculate in-degree of each vertex
    for (int i = 0; i < graph->numVertices; i++) {
        for (int j = 0; j < graph->numVertices; j++) {
            inDegree[j] += graph->adjMatrix[i][j];
        }
    }

    printf("Topological Sort (Source Removal): ");
    for (int i = 0; i < graph->numVertices; i++) {
        int v = findZeroInDegree(inDegree, graph->numVertices, visited);
        if (v != -1) {
            printf("%d ", v);
            visited[v] = 1;
            for (int j = 0; j < graph->numVertices; j++) {
                if (graph->adjMatrix[v][j] == 1) {
                    inDegree[j]--;
                }
            }
        }
    }
    printf("\n");
}

int main() {
    int vertices = 6; // Example number of vertices
    Graph* graph = createGraph(vertices);

    // Example edges in a directed graph
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);

    // Perform topological sort using DFS
    dfsTopologicalSort(graph);

    // Perform topological sort using Source Removal Technique
    sourceRemovalTopologicalSort(graph);

    // Free the graph memory
    for (int i = 0; i < vertices; i++) {
        free(graph->adjMatrix[i]);
    }
    free(graph->adjMatrix);
    free(graph);

    return 0;
}

